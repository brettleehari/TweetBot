graph TD
    subgraph 🧠 True Agentic Orchestrator Process
        direction LR
        OrchestratorStart([🚀 Start true-agentic-orchestrator.js]) --> OrchestratorInit[⚙️ Initialize Orchestrator]
        OrchestratorInit --> AgentCreation[🤖 Create Agentic Agents]
        OrchestratorInit --> DBConnect1[(�️)]
        
        OrchestratorInit --> StrategicCycles{⏰ Strategic Orchestration Cycles}
        StrategicCycles --> AssessState[� Assess System State]
        AssessState --> ExternalAPIs[🌐 Fetch External Data]
        ExternalAPIs --> CoinGecko[� CoinGecko Price]
        
        AssessState --> MakeDecisions[🧠 Make Strategic Decisions]
        MakeDecisions --> ExpertMethodology[🏆 Use BTC Expert Methodology]
        MakeDecisions --> LogToDB[📝 Write to Database]
        
        LogToDB --> DB_Portfolio_Write([fa:fa-edit Portfolio])
        LogToDB --> DB_Trades_Write([fa:fa-edit Trades])
        LogTogether with a descriptive commit message.
        LogToDB --> DB_History_Write([fa:fa-edit History])
        LogToDB --> DB_Logs_Write([fa:fa-edit Agent Logs])
    end

    subgraph 🌐 Web Server & API Process
        direction LR
        ServerStart([� Start real-time-server.js]) --> ExpressInit[� Initialize Express Server]
        ExpressInit --> StaticServing[📁 Serve Static Dashboard]
        ExpressInit --> APIEndpoints[🔌 Define API Endpoints]
        ExpressInit --> DBConnect2[(🗄️)]

        APIEndpoints --> API_Portfolio["/api/portfolio"]
        APIEndpoints --> API_Performance["/api/performance"]
        APIEndpoints --> API_AgentStatus["/api/agent-status"]
        APIEndpoints --> API_TradeHistory["/api/trade-history"]
        
        API_Portfolio --> DB_Portfolio_Read([fa:fa-book-open Portfolio])
        API_Performance --> DB_History_Read([fa:fa-book-open History])
        API_AgentStatus --> DB_Logs_Read([fa:fa-book-open Agent Logs])
        API_TradeHistory --> DB_Trades_Read([fa:fa-book-open Trades])
    end

    subgraph �️ Central Database [Single Source of Truth]
        direction TB
        style CentralDatabase fill:#f0f4f8,stroke:#b0c4de
        Database[(trading.db)]
    end
    
    subgraph �️ User Dashboard
        direction TB
        User([� User]) --> Dashboard[📊 View Dashboard]
        Dashboard --> Call_API_Portfolio["Request Portfolio"]
        Dashboard --> Call_API_Performance["Request Performance"]
        Dashboard --> Call_API_AgentStatus["Request Agent Status"]
    end

    %% Connections
    DBConnect1 --> Database
    DBConnect2 --> Database
    
    LogToDB -- writes to --> Database
    
    DB_Portfolio_Read --> API_Portfolio
    DB_History_Read --> API_Performance
    DB_Logs_Read --> API_AgentStatus
    DB_Trades_Read --> API_TradeHistory

    Call_API_Portfolio --> API_Portfolio
    Call_API_Performance --> API_Performance
    Call_API_AgentStatus --> API_AgentStatus

    %% Styling
    classDef process fill:#e6f0ff,stroke:#99c2ff,stroke-width:2px
    classDef database fill:#fff0e6,stroke:#ffc299,stroke-width:2px
    classDef user fill:#e6ffe6,stroke:#99ff99,stroke-width:2px
    classDef entry fill:#d1e0e0,stroke:#85adad,stroke-width:2px,font-weight:bold

    class OrchestratorStart,ServerStart entry
    class "🧠 True Agentic Orchestrator Process" process
    class "🌐 Web Server & API Process" process
    class "🗄️ Central Database [Single Source of Truth]" database
    class "🖥️ User Dashboard" user
